{{- /* Setup script adapted from https://github.com/felipecrs/dotfiles */ -}}

{{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
{{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
{{- $headless := or (env "SSH_CLIENT" | not | not) (not (or (env "DISPLAY") (env "WAYLAND_DISPLAY"))) -}}

{{- $username := output "logname" | trim -}}
{{- $full_name := "" -}}
{{- $email := "" -}}
{{- $computer_name := "" -}}
{{- $hostname := .chezmoi.hostname -}}

{{- /* Grab some different defaults of we're on macOS */ -}}
{{- if eq .chezmoi.os "darwin" -}}
{{-   $full_name = output "id" "-F" $username | trim -}}
{{-   $mobileme_conf_file := (joinPath "/Users/" $username "/Library/Preferences/MobileMeAccounts.plist") -}}
{{-   if $mobileme_conf_file | lstat -}}
{{-     $email = output "/usr/libexec/PlistBuddy" "-c" "print :Accounts:0:AccountID" (joinPath "/Users/" $username "/Library/Preferences/MobileMeAccounts.plist") | trim -}}
{{-   end -}}
{{-   $computer_name = output "scutil" "--get" "ComputerName" -}}
{{-   $hostname = output "scutil" "--get" "LocalHostName" -}}
{{- end -}}

{{- /* Default to values already provided if available */ -}}
{{- if hasKey . "full_name" -}}
{{-   $full_name = .full_name -}}
{{- end -}}
{{- if hasKey . "email" -}}
{{-   $email = .email -}}
{{- end -}}
{{- if hasKey . "computer_name" -}}
{{-   $computer_name = .computer_name -}}
{{- end -}}
{{- if hasKey . "hostname" -}}
{{-   $hostname = .hostname -}}
{{- end -}}

{{- if $interactive -}}

{{-   range $i := until 99 -}}
{{-     $question := "> What is your full name (for git config)" -}}
{{-     $answer := "" -}}
{{-     if $full_name -}}
{{-       $answer = promptString $question $full_name -}}
{{-     else -}}
{{-       $answer = promptString $question -}}
{{-     end -}}
{{-     if regexMatch "^[A-Z][-' a-zA-Z]+$" $answer -}}
{{-       $full_name = $answer -}}
{{-       writeToStdout (printf "‚úÖ Name set as '%s'\n" $full_name) -}}
{{-       break -}}
{{-     end -}}
{{-     writeToStdout (printf "‚ùå '%s' is an invalid name\n" $answer) -}}
{{-     if eq $i 98 -}}
{{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
{{-       exit 1 -}}
{{-     end -}}
{{-   end -}}

{{-   range $i := until 99 -}}
{{-     $question := "> What is your email (for git config)" -}}
{{-     $answer := "" -}}
{{-     if $email -}}
{{-       $answer = promptString $question $email -}}
{{-     else -}}
{{-       $answer = promptString $question -}}
{{-     end -}}
{{-     $answer = lower $answer -}}
{{-     if regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$" $answer -}}
{{-       $email = $answer -}}
{{-       writeToStdout (printf "‚úÖ Email set as '%s'\n" $email) -}}
{{-       break -}}
{{-     end -}}
{{-     writeToStdout (printf "‚ùå '%s' is an invalid email\n" $answer) -}}
{{-     if eq $i 98 -}}
{{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
{{-       exit 1 -}}
{{-     end -}}
{{-   end -}}

{{-   range $i := until 99 -}}
{{-     $question := "> What is a user-fiendly name for this computer? (as seen in network services)" -}}
{{-     $answer := "" -}}
{{-     if $computer_name -}}
{{-       $answer = promptString $question $computer_name -}}
{{-     else -}}
{{-       $answer = promptString $question -}}
{{-     end -}}
{{-     if regexMatch "^[a-zA-Z0-9][-' a-zA-Z0-9]+$" $answer -}}
{{-       $computer_name = $answer -}}
{{-       writeToStdout (printf "‚úÖ Computer Name set as '%s'\n" $computer_name) -}}
{{-       break -}}
{{-     end -}}
{{-     writeToStdout (printf "‚ùå '%s' is an invalid name\n" $answer) -}}
{{-     if eq $i 98 -}}
{{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
{{-       exit 1 -}}
{{-     end -}}
{{-   end -}}

{{-   range $i := until 99 -}}
{{-     $question := "> What should the hostname for this computer be? (lowercase, no spaces)" -}}
{{-     $answer := "" -}}
{{-     if $hostname -}}
{{-       $answer = promptString $question $hostname -}}
{{-     else -}}
{{-       $answer = promptString $question -}}
{{-     end -}}
{{-     if regexMatch "^[a-zA-Z0-9][-_a-zA-Z0-9]*$" $answer -}}
{{-       $hostname = $answer -}}
{{-       writeToStdout (printf "‚úÖ Hostname set as '%s'\n" $hostname) -}}
{{-       break -}}
{{-     end -}}
{{-     writeToStdout (printf "‚ùå '%s' is an invalid hostname\n" $answer) -}}
{{-     if eq $i 98 -}}
{{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
{{-       exit 1 -}}
{{-     end -}}
{{-   end -}}

{{-   writeToStdout "\nüí° Tip: you can always make chezmoi ask this again by running `chezmoi init` without `--force`.\n" -}}
{{- end -}}

{{- /* This retains the value passed with --source on chezmoi init, which is used in the ../install.sh script */ -}}
{{- /* 
IMPORTANT: TOML Section Ordering Rule
=====================================
In TOML, all top-level key-value pairs MUST come before any [section] headers.
If a key-value pair appears after a section header, it becomes part of that section.

CORRECT order:
  key1 = "value"
  key2 = "value"
  [section1]
  ...

INCORRECT order (causes parsing errors):
  [section1]
  key1 = "value"  # This becomes part of section1, not top-level!

This was the cause of the "encryption not set" warning - the encryption key
was being parsed as part of the [hooks] section instead of top-level.
*/ -}}
sourceDir = {{ .chezmoi.workingTree | quote }}

verbose = true
encryption = "age"

[age]
  identity = "~/.config/chezmoi/key.txt"
  recipient = "age1j78rq7y3x5hx3x7lra4p44jkfzsme3v3vnhj6t9cpf8dywwwaeksqfgtx4"

[diff]
  exclude = ["scripts"]

[status]
  exclude = ["always"]

[data]
  is_headless = {{ $headless }}
  username = {{ $username | quote }}
  full_name = {{ $full_name | quote }}
  email = {{ $email | quote }}
  computer_name = {{ $computer_name | quote }}
  hostname = {{ $hostname | quote }}

[hooks.read-source-state.pre]
  command = "{{ .chezmoi.sourceDir }}/.chezmoihooks/pre-source-state.sh"
