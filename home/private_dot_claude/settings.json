{
  "permissions": {
    "allow": [
      "Bash(asdf current:*)",
      "Bash(asdf install:*)",
      "Bash(brew bundle dump:*)",
      "Bash(chezmoi add:*)",
      "Bash(chezmoi status:*)",
      "Bash(chezmoi target-path:*)",
      "Bash(echo $0)",
      "Bash(echo $SHELL)",
      "Bash(env)",
      "Bash(fi)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(git branch)",
      "Bash(git commit:*)",
      "Bash(git clone:*)",
      "Bash(git diff:*)",
      "Bash(git dt:*)",
      "Bash(git fetch:*)",
      "Bash(git log:*)",
      "Bash(git merge-base:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git rebase:*)",
      "Bash(git rev-parse:*)",
      "Bash(git stash:*)",
      "Bash(git status)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm ci)",
      "Bash(npm info:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run eslint:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run test:*)",
      "Bash(npm run prettier:*)",
      "Bash(npm run prettier:fix:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm update:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(npx tsc:*)",
      "Bash(npx vitest run:*)",
      "Bash(open:*)",
      "Bash(ps:*)",
      "Bash(sed:*)",
      "Edit(~/.claude/caches/*.md)",
      "Read(~/.claude/**)",
      "Read(~/.claude/caches/*.md)",
      "Read(~/.local/share/chezmoi/**)",
      "Read(~/.local/share/chezmoi/CLAUDE.md)",
      "Read(~/Projects/bstock-projects/**/.mcp.json)",
      "Read(~/Projects/bstock-projects/**/CLAUDE.md)",
      "Read(~/Projects/bstock-projects/**/package.json)",
      "WebSearch",
      "WebFetch(domain:developers.google.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:docs.gitlab.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:gitlab.bstock.io)",
      "mcp__atlassian__addCommentToJiraIssue",
      "mcp__atlassian__atlassianUserInfo",
      "mcp__atlassian__createJiraIssue",
      "mcp__atlassian__editJiraIssue",
      "mcp__atlassian__getAccessibleAtlassianResources",
      "mcp__atlassian__getConfluencePage",
      "mcp__atlassian__getConfluencePageAncestors",
      "mcp__atlassian__getConfluencePageDescendants",
      "mcp__atlassian__getConfluencePageFooterComments",
      "mcp__atlassian__getConfluencePageInlineComments",
      "mcp__atlassian__getConfluenceSpaces",
      "mcp__atlassian__getJiraIssue",
      "mcp__atlassian__getJiraIssueRemoteIssueLinks",
      "mcp__atlassian__getJiraProjectIssueTypesMetadata",
      "mcp__atlassian__getTransitionsForJiraIssue",
      "mcp__atlassian__getVisibleJiraProjects",
      "mcp__atlassian__lookupJiraAccountId",
      "mcp__atlassian__searchConfluenceUsingCql",
      "mcp__atlassian__searchJiraIssuesUsingJql",
      "mcp__atlassian__transitionJiraIssue",
      "mcp__context7__get-library-docs",
      "mcp__context7__resolve-library-id",
      "mcp__gitlab__create_merge_request",
      "mcp__gitlab__create_merge_request_note",
      "mcp__gitlab__create_merge_request_thread",
      "mcp__gitlab__create_note",
      "mcp__gitlab__create_pipeline",
      "mcp__gitlab__get_branch_diffs",
      "mcp__gitlab__get_draft_note",
      "mcp__gitlab__get_file_contents",
      "mcp__gitlab__get_merge_request",
      "mcp__gitlab__get_merge_request_diffs",
      "mcp__gitlab__get_pipeline",
      "mcp__gitlab__get_pipeline_job",
      "mcp__gitlab__get_pipeline_job_output",
      "mcp__gitlab__get_project",
      "mcp__gitlab__get_repository_tree",
      "mcp__gitlab__get_users",
      "mcp__gitlab__list_draft_notes",
      "mcp__gitlab__list_merge_requests",
      "mcp__gitlab__list_merge_request_diffs",
      "mcp__gitlab__list_pipelines",
      "mcp__gitlab__list_pipeline_jobs",
      "mcp__gitlab__list_projects",
      "mcp__gitlab__mr_discussions",
      "mcp__gitlab__retry_pipeline",
      "mcp__gitlab__search_repositories",
      "mcp__gitlab__update_merge_request",
      "mcp__gitlab__update_merge_request_note",
      "mcp__ide__getDiagnostics"
    ],
    "deny": [
      "Bash(chezmoi cd:*)"
    ],
    "ask": [
      "Bash(chezmoi apply:*)",
      "Bash(rm:*)"
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "bash ~/.claude/statusline-script.sh"
  },
  "feedbackSurveyState": {
    "lastShownTime": 1753997328049
  }
}